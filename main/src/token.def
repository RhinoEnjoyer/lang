/*create a test that cheks any spill over that the patterns might have */

#ifndef TOKEN_BASE
#define TOKEN_BASE(code)
#endif


#ifndef TOKEN_VIRTUAL
#define TOKEN_VIRTUAL(code) TOKEN_BASE(code)
#endif

#ifndef TOKEN_SYMBOL_SEQUENCE
#define TOKEN_SYMBOL_SEQUENCE(spelling, code) TOKEN_BASE(code)
#endif

#ifndef TOKEN_ONE_CHAR
#define TOKEN_ONE_CHAR(spelling, code) TOKEN_BASE(code)
#endif

#ifndef TOKEN_SYMETRICAL_OPEN_SEQUENCE
#define TOKEN_SYMETRICAL_OPEN_SEQUENCE(spelling, code, closing_code,           \
                                       sgroup_code) TOKEN_BASE(code)
#endif

#ifndef TOKEN_SYMETRICAL_CLOSE_SEQUENCE
#define TOKEN_SYMETRICAL_CLOSE_SEQUENCE(spelling, code, opening_code,          \
                                        sgroup_code) TOKEN_BASE(code)
#endif

#ifndef TOKEN_BUILTIN_KEYWORD
#define TOKEN_BUILTIN_KEYWORD(spelling, code) TOKEN_BASE(code)
#endif

/* This kinda sucks if I change stuff all the time but it is good for now */
#ifndef TOKEN_OPERAND
#define TOKEN_OPERAND(code) 
#endif

#ifndef TOKEN_OPERATOR
#define TOKEN_OPERATOR(code)
#endif

#ifndef TOKEN_LOPERATOR
#define TOKEN_LOPERATOR(code) TOKEN_OPERATOR(code)
#endif

#ifndef TOKEN_LROPERATOR
#define TOKEN_LROPERATOR(code) TOKEN_OPERATOR(code)
#endif

#ifndef TOKEN_ROPERATOR
#define TOKEN_ROPERATOR(code) TOKEN_OPERATOR(code)
#endif

#ifndef TOKEN_BOPERATOR
#define TOKEN_BOPERATOR(code) TOKEN_OPERATOR(code)
#endif

#ifndef TOKEN_PARALLEL_SEQUENCE
#define TOKEN_PARALLEL_SEQUENCE(spelling, code, sgroup_code) 
#endif

TOKEN_VIRTUAL(BEGINSYMETRICAL)
TOKEN_VIRTUAL(ENDGROUP)
TOKEN_VIRTUAL(ENDSTMT)
TOKEN_VIRTUAL(ERROR)
TOKEN_VIRTUAL(ID)
TOKEN_VIRTUAL(INT)
TOKEN_VIRTUAL(FLOAT)

TOKEN_VIRTUAL(TYPE_BOOLEAN)
TOKEN_VIRTUAL(TYPE_FLOAT)
TOKEN_VIRTUAL(TYPE_INT)
TOKEN_VIRTUAL(TYPE_UINT)

TOKEN_VIRTUAL(VIRTUAL_EMPTY)

/*length 3 symbols*/
/* TOKEN_SYMBOL_SEQUENCE("<=>", SPACESHIP) */
TOKEN_SYMBOL_SEQUENCE("...", ELIPSIS)
TOKEN_SYMBOL_SEQUENCE("&&=", ANDASIGN)
TOKEN_SYMBOL_SEQUENCE("||=", ORASIGN)
/*length 2 symbols*/
TOKEN_SYMBOL_SEQUENCE("::", DCOLON)
TOKEN_SYMBOL_SEQUENCE("==", EQUALS)
TOKEN_SYMBOL_SEQUENCE(">=", GEQUALS)
TOKEN_SYMBOL_SEQUENCE("<=", LEQUALS)
TOKEN_SYMBOL_SEQUENCE("!=", EMARKEQUALS)
TOKEN_SYMBOL_SEQUENCE(":=", COLONASIGN)
TOKEN_SYMBOL_SEQUENCE("+=", PLUSASIGN)
TOKEN_SYMBOL_SEQUENCE("-=", MINUSASIGN)
TOKEN_SYMBOL_SEQUENCE("/=", DIVASIGN)
TOKEN_SYMBOL_SEQUENCE("*=", MULASIGN)
TOKEN_SYMBOL_SEQUENCE(">>", GREATERGREATER)
TOKEN_SYMBOL_SEQUENCE("<<", LESSLESS)
TOKEN_SYMBOL_SEQUENCE("<>", LESSGREATER)
TOKEN_SYMBOL_SEQUENCE("|^", XOR)
TOKEN_SYMBOL_SEQUENCE("&&", AND)
TOKEN_SYMBOL_SEQUENCE("||", OR)
TOKEN_SYMBOL_SEQUENCE("->", MINUSGREATER)
TOKEN_SYMBOL_SEQUENCE("++", PLUSPLUS)
TOKEN_SYMBOL_SEQUENCE("--", MINUSMINUS)
/*length 1 symbols*/
TOKEN_SYMBOL_SEQUENCE("%", MODULO)
TOKEN_SYMBOL_SEQUENCE("=", ASIGN)
TOKEN_SYMBOL_SEQUENCE("~", PERISPOMENI)
TOKEN_SYMBOL_SEQUENCE("&", AMPERSAND)
TOKEN_SYMBOL_SEQUENCE("^", CARET)
TOKEN_SYMBOL_SEQUENCE(":", COLON)
TOKEN_SYMBOL_SEQUENCE(",", COMMA)
TOKEN_SYMBOL_SEQUENCE(".", DOT)
TOKEN_SYMBOL_SEQUENCE("+", PLUS)
TOKEN_SYMBOL_SEQUENCE("-", MINUS)
TOKEN_SYMBOL_SEQUENCE("/", DIV)
TOKEN_SYMBOL_SEQUENCE("*", MUL)
TOKEN_SYMBOL_SEQUENCE("<", LESS)
TOKEN_SYMBOL_SEQUENCE(">", GREATER)
TOKEN_SYMBOL_SEQUENCE("!", EMARK)

TOKEN_SYMETRICAL_OPEN_SEQUENCE("[[", LDBRACE, RDBRACE, DBRACES)
TOKEN_SYMETRICAL_CLOSE_SEQUENCE("]]", RDBRACE, LDBRACE, DBRACES)

TOKEN_SYMETRICAL_OPEN_SEQUENCE("(", LPAREN, RPAREN, PARENS)
TOKEN_SYMETRICAL_CLOSE_SEQUENCE(")", RPAREN, LPAREN, PARENS)

TOKEN_SYMETRICAL_OPEN_SEQUENCE("[", LBRACE, RBRACE, BRACES)
TOKEN_SYMETRICAL_CLOSE_SEQUENCE("]", RBRACE, LBRACE, BRACES)

TOKEN_SYMETRICAL_OPEN_SEQUENCE("{", LCBRACE, RCBRACE, CBRACES)
TOKEN_SYMETRICAL_CLOSE_SEQUENCE("}", RCBRACE, LCBRACE, CBRACES)

TOKEN_PARALLEL_SEQUENCE("\"", DQUOTE, STRLIT)
TOKEN_PARALLEL_SEQUENCE("\'", SQUOTE, CHARLIT)

/*
        The ordering for these can have a perfomance impact
        but having the most probalbe one on the top
        even if you have only that token causes a slowdown
        a small slowdown but still a slowdown
        I am not sure why
*/
/* maybe we should do lazy eval for this one */
TOKEN_BUILTIN_KEYWORD("@jmp", BUILTIN_JMP) 
TOKEN_BUILTIN_KEYWORD("@ptr", BUILTIN_PTR) 
TOKEN_BUILTIN_KEYWORD("@void", BUILTIN_VOID) 
TOKEN_BUILTIN_KEYWORD("@always_inline", BUILTIN_ALWAYS_INLINE)
TOKEN_BUILTIN_KEYWORD("@never_inline", BUILTIN_NEVER_INLINE)
TOKEN_BUILTIN_KEYWORD("@inimitable", BUILTIN_INIMITABLE)
TOKEN_BUILTIN_KEYWORD("@collection", BUILTIN_COLLECTION)
TOKEN_BUILTIN_KEYWORD("@part_of", BUILTIN_PART_OF)
TOKEN_BUILTIN_KEYWORD("@reallocfn", BUILTIN_REALLOCFN)
TOKEN_BUILTIN_KEYWORD("@imitable", BUILTIN_IMITABLE)
TOKEN_BUILTIN_KEYWORD("@countof", BUILTIN_COUNTOF)
TOKEN_BUILTIN_KEYWORD("@allocfn", BUILTIN_ALLOCFN)

TOKEN_BUILTIN_KEYWORD("@extract", BUILTIN_EXTRACT)
TOKEN_BUILTIN_KEYWORD("@inject", BUILTIN_INJECT)

TOKEN_BUILTIN_KEYWORD("@sizeof", BUILTIN_SIZEOF)
TOKEN_BUILTIN_KEYWORD("@template", BUILTIN_TEMPLATE)
TOKEN_BUILTIN_KEYWORD("@typeof", BUILTIN_TYPEOF)
TOKEN_BUILTIN_KEYWORD("@default", BUILTIN_DEFAULT)
TOKEN_BUILTIN_KEYWORD("@freefn", BUILTIN_FREEFN)
TOKEN_BUILTIN_KEYWORD("@switch", BUILTIN_SWITCH)
TOKEN_BUILTIN_KEYWORD("@import", BUILTIN_IMPORT)
TOKEN_BUILTIN_KEYWORD("@scope", BUILTIN_SCOPE)
TOKEN_BUILTIN_KEYWORD("@while", BUILTIN_WHILE)
TOKEN_BUILTIN_KEYWORD("@defer", BUILTIN_DEFER)
TOKEN_BUILTIN_KEYWORD("@union", BUILTIN_UNION)
TOKEN_BUILTIN_KEYWORD("@alias", BUILTIN_ALIAS)
TOKEN_BUILTIN_KEYWORD("@align", BUILTIN_ALIGN)
TOKEN_BUILTIN_KEYWORD("@break", BUILTIN_BREAK)
TOKEN_BUILTIN_KEYWORD("@float", BUILTIN_FLOAT)
TOKEN_BUILTIN_KEYWORD("@case", BUILTIN_CASE)
TOKEN_BUILTIN_KEYWORD("@pipe", BUILTIN_PIPE)
TOKEN_BUILTIN_KEYWORD("@enum", BUILTIN_ENUM)
TOKEN_BUILTIN_KEYWORD("@type", BUILTIN_TYPE)
TOKEN_BUILTIN_KEYWORD("@priv", BUILTIN_PRIVATE)
TOKEN_BUILTIN_KEYWORD("@sint", BUILTIN_SINT)
TOKEN_BUILTIN_KEYWORD("@uint", BUILTIN_UINT)
TOKEN_BUILTIN_KEYWORD("@self", BUILTIN_SELF)
TOKEN_BUILTIN_KEYWORD("@null", BUILTIN_NULL)
TOKEN_BUILTIN_KEYWORD("@imut", BUILTIN_IMMUTABLE)
TOKEN_BUILTIN_KEYWORD("@any", BUILTIN_ANY)
TOKEN_BUILTIN_KEYWORD("@ret", BUILTIN_RETURN)
TOKEN_BUILTIN_KEYWORD("@become", BUILTIN_BECOME)
TOKEN_BUILTIN_KEYWORD("@vec", BUILTIN_VECTOR)
TOKEN_BUILTIN_KEYWORD("@fn", BUILTIN_FN)
TOKEN_BUILTIN_KEYWORD("@pub", BUILTIN_PUBLIC)
TOKEN_BUILTIN_KEYWORD("@mut", BUILTIN_MUTABLE)
TOKEN_BUILTIN_KEYWORD("@set", BUILTIN_SET)
TOKEN_BUILTIN_KEYWORD("@rec", BUILTIN_REC)
TOKEN_BUILTIN_KEYWORD("@int", BUILTIN_INT)
TOKEN_BUILTIN_KEYWORD("@for", BUILTIN_FOR)
TOKEN_BUILTIN_KEYWORD("@if", BUILTIN_IF)
TOKEN_BUILTIN_KEYWORD("@as", BUILTIN_AS)
TOKEN_BUILTIN_KEYWORD("@0", BUILTIN_ZERONULL)
TOKEN_BUILTIN_KEYWORD("@", BUILTIN_DUCKLING)

TOKEN_OPERAND(ID)
TOKEN_OPERAND(INT)
TOKEN_OPERAND(FLOAT)
TOKEN_OPERAND(BUILTIN_SIZEOF)
TOKEN_OPERAND(BUILTIN_FN)
TOKEN_OPERAND(BUILTIN_REC)
TOKEN_OPERAND(BUILTIN_DUCKLING)
TOKEN_OPERAND(BUILTIN_IF)
TOKEN_OPERAND(BUILTIN_SWITCH)

TOKEN_BOPERATOR(PLUSASIGN)
TOKEN_BOPERATOR(MINUSASIGN)
TOKEN_BOPERATOR(DIVASIGN)
TOKEN_BOPERATOR(MULASIGN)
TOKEN_BOPERATOR(ASIGN)
TOKEN_BOPERATOR(EQUALS)
TOKEN_BOPERATOR(GEQUALS)
TOKEN_BOPERATOR(LEQUALS)
TOKEN_BOPERATOR(EMARKEQUALS)
TOKEN_BOPERATOR(GREATERGREATER)
TOKEN_BOPERATOR(LESSLESS)
TOKEN_BOPERATOR(XOR)
TOKEN_BOPERATOR(AND)
TOKEN_BOPERATOR(OR)
TOKEN_BOPERATOR(MINUSGREATER)
TOKEN_BOPERATOR(PLUS)
TOKEN_BOPERATOR(DOT)
TOKEN_BOPERATOR(GREATER)
TOKEN_BOPERATOR(LESS)
TOKEN_BOPERATOR(MINUS)
TOKEN_BOPERATOR(DIV)
TOKEN_BOPERATOR(MUL)

TOKEN_LROPERATOR(PLUSPLUS)
TOKEN_LROPERATOR(MINUSMINUS)

TOKEN_LOPERATOR(CARET)
TOKEN_LOPERATOR(PERISPOMENI)
TOKEN_LOPERATOR(AMPERSAND)
TOKEN_LOPERATOR(EMARK)

#undef TOKEN_LROPERATOR
#undef TOKEN_BOPERATOR
#undef TOKEN_ROPERATOR
#undef TOKEN_LOPERATOR
#undef TOKEN_OPERATOR
#undef TOKEN_OPERAND
#undef TOKEN_VIRTUAL
#undef TOKEN_BUILTIN_KEYWORD
#undef TOKEN_SYMBOL_SEQUENCE
#undef TOKEN_ONE_CHAR
#undef TOKEN_SYMETRICAL_OPEN_SEQUENCE
#undef TOKEN_SYMETRICAL_CLOSE_SEQUENCE
#undef TOKEN_PARALLEL_SEQUENCE
#undef TOKEN_OPERATOR
#undef TOKEN_BASE
