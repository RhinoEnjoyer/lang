#pragma once
#include "../median_enum.hpp"
#include "../str_lit.hpp"
#include "../token.hpp"
#include "../token_str.hpp"
#include <boost/container/flat_map.hpp>

#include <cstdlib>
#include <cstring>

#include <array>
#include <iostream>
#include <map>
#include <span>
#include <type_traits>
#include <utility>
#include <variant>

namespace parser {
using cursor_t = podlist_t<token_t>::c_it;

struct node_t {
  using final_t = cursor_t;

  struct median_t {
    using code_t = medianc::e;

    code_t type_;
    std::int32_t len_;
  };

  struct err_t {
    std::int32_t index_;
  };

  using node_var_t = std::variant<final_t, median_t, err_t>;
  using cnode_var_t = std::variant<const final_t, const median_t, const err_t>;
  node_var_t node;

  template <typename T, bool is_const> struct base_proxy_t {
    using self_t =
        std::conditional_t<is_const, const node_t *const, node_t *const>;
    self_t self;

    // Access as T
    [[nodiscard]] auto get() -> T & { return std::get<T>(self->node); }
    [[nodiscard]] auto get() const -> const T & {
      return std::get<T>(self->node);
    }

    base_proxy_t &operator=(const T &value) {
      self = value;
      return *this;
    }

    base_proxy_t &operator=(T &&value) {
      self = std::move(value);
      return *this;
    }
  };

  template <bool is_const>
  struct median_proxy_t : public base_proxy_t<median_t, is_const> {
    auto children() -> podlist_t<node_t>::span<is_const> {
      node_t *ptr = (this->self.ptr()) + 1;
      return podlist_t<node_t>::span<is_const>(ptr, this->size());
    }
    auto size() const -> size_t { return this->get().len_; }
  };

  template <typename T> using proxy_t = base_proxy_t<T, false>;
  template <typename T> using cproxy_t = base_proxy_t<T, true>;


  [[nodiscard]] auto as_median() -> median_proxy_t<false> { return {this}; }
  [[nodiscard]] auto as_final() -> final_t { return std::get<final_t>(node); }
  [[nodiscard]] auto as_err() -> proxy_t<err_t> { return {this}; }

  [[nodiscard]] auto as_median() const -> median_proxy_t<true> {
    return {this};
  }
  [[nodiscard]] auto as_final() const -> final_t {
    return std::get<final_t>(node);
  }
  [[nodiscard]] auto as_err() const -> cproxy_t<err_t> { return {this}; }

  template <typename T>
  [[nodiscard]] auto
  as() -> std::conditional_t<
           std::is_same_v<T, median_t>, median_proxy_t<false>,
           std::conditional_t<std::is_same_v<T, err_t>, proxy_t<err_t>, T>> {
    if constexpr (std::is_same_v<T, median_t>) {
      return median_proxy_t<false>{this};
    } else if constexpr (std::is_same_v<T, err_t>) {
      return proxy_t<err_t>{this};
    } else {
      static_assert(std::is_same_v<T, final_t>, "Unsupported type for as()");
      return std::get<T>(node);
    }
  }
  [[nodiscard]] auto is_median() const -> bool {
    return std::holds_alternative<median_t>(node);
  }
  [[nodiscard]] auto is_final() const -> bool {
    return std::holds_alternative<final_t>(node);
  }
  [[nodiscard]] auto is_err() const -> bool {
    return std::holds_alternative<err_t>(node);
  }

  template <typename T> [[nodiscard]] auto as_checked() -> auto {
    if (!std::holds_alternative<T>(node))
      throw std::runtime_error("Node does not hold the expected type");
    return this->as<T>();
  }
  template <typename T> [[nodiscard]] auto as_checked() const -> const auto {
    return as_checked<T>();
  }

  [[nodiscard]] static auto make(cursor_t cursor) -> node_t {
    return node_t{final_t(cursor)};
  }
  [[nodiscard]] static auto make(median_t::code_t type,
                                 std::int32_t len) -> node_t {
    return node_t{median_t{type, len}};
  }
};

using node_buffer_t = podlist_t<node_t>;
using parser_out = podlist_t<node_t>;


auto entry(const token_buffer_t &toks, cursor_t cursor,
           const cursor_t end) -> parser_out;

auto traverse(const token_buffer_t &buf, podlist_t<node_t> &buffer) -> void;
} // namespace parser
