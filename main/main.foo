// A: @type = s32;
// B: @type = A;
// C: @type = B;

// rec: @type = @rec(a: s32; b: C);

// a: rec = a;
// b: f128 = 10;
// d: s32;

// core: @scope(
//   cstd: @scope(
//     int8:   @type = s8;
//     int32:  @type = s32;
//     int64:  @type = s64;

//     uint8: @type = u8;
//     uint32: @type = u32;
//     uint64: @type = f32;

//     smth: @scope(
//       int1: @type = @rec(m0: s32; create: @fn(a: s32; b: s32)(s32) = @self);
//       int2: @type = @rec(m0: s32; m1: s32);
//       int3: @type = @rec(m0: s32; m1: s32; m2: s32);
//       int4: @type = @rec(m0: s32; m1: s32; m2: s32; m3: s32);
//     );
//   );
// );

// ascope: @scope(
//   e: @type = core::cstd::int64;
//   z: @type = core::cstd::int64;
// );

// booba: @type = core::cstd::smth::int1;

// fn: @fn(a: core::cstd::smth::int1; c: s32; d: s32)(s32) = 10 + 20 -> @pipe * 10;

// rrr: @ptr;
a: s32;
b: s32;
c: s32;

allocator: @type = @rec(
  type: @scope(
    allocfn:   @type = ~@fn(alloc_ptr: @ptr; size: u64)(@ptr);
    reallocfn: @type = ~@fn(alloc_ptr: @ptr; ptr: @ptr; size: u64)(@ptr);
    freefn:    @type = ~@fn(alloc_ptr: @ptr; ptr: @ptr)(s32);
  );

  m: @scope(
    allocator: @ptr;
    alloc:     type::allocfn;
    realloc:   type::reallocfn;
    free:      type::freefn;
  );
);



a := @rec(a: s32;b: s32)::(10;20);
// [a;b;c] := @tup(s32;s32;s32)::(10;20;30);

