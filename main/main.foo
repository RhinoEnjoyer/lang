  core: @scope (
    allocator_t: @type  @rec(
      alloc_fn:   @type @fn(alloc_ptr: @ptr; size: u64)(@ptr);
      realloc_fn: @type @fn(alloc_ptr: @ptr; ptr: @ptr; size: u64)(@ptr);
      free_fn:    @type @fn(alloc_ptr: @ptr; ptr: @ptr);

      aptr: @ptr;
      internal: @scope(
        alloc: ~alloc_fn;
        realloc:~realloc_fn;
        free:   ~free_fn;
      );

      alloc:   @fn(size: u64)(@ptr) = internal::alloc(aptr; size);
      realloc: @fn(ptr: @ptr; size: u64)(@ptr) = internal::realloc(aptr; ptr; size);
      free:    @fn(ptr: @ptr;) = internal::free(aptr; ptr);
    );

    pool_t: @type @rec(
      data: @ptr;
      size: u64;
      capacity: u64;

      alloc: @fn(alloc_ptr: @ptr; size: u64)(@ptr)= (
        pool := @as{~pool_t}aptr;

        size + pool::size ->
          @if(@pipe > pool::capacity)
              (@ret @null);

        res := data + pool::size;
        pool::size += size;
        @ret res;
      );
      realloc: @fn(alloc_ptr: @ptr; ptr: @ptr; size: u64)(@ptr) = @null;
      free:  @fn(alloc_ptr: @ptr; ptr: @ptr)(@void) = ();

      make: @fn(mem: @ptr; capacity: u64)(pool_t) = (@ret {pool_t}::(mem; 0; capacity));

      make_allocator: @fn->(allocator_t) = (
        @ret {allocator_t}::(@self; pool_t::malloc; pool_t::realloc; pool_t::free);
      );
    );
  );

 main: @fn(argc: s32; argv: ~~u8)(s32) = (
   pool := @as{u64}1000 -> pool_t::make(c::malloc(@pipe); @pipe);
   allocator := pool::make_allocator();
   val: ~s32 = allocator::alloc();
 );









